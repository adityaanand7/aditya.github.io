<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya Anand</title>
    <link>https://adityaanand7.github.io/research/</link>
    <description>Recent content on Aditya Anand</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Â© 2023 by Aditya Anand. &lt;a href=&#39;https://adityaanand7.github.io/privacy&#39;&gt;Privacy policy&lt;/a&gt;.</copyright>
    <lastBuildDate>Tue, 20 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adityaanand7.github.io/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write Barriers in JIT Compilers</title>
      <link>https://adityaanand7.github.io/research/general/write_barriers/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/write_barriers/</guid>
      <description>&lt;p&gt;In languages like Java where garbage collector (GC) is used for cleaning up the unused references. The idea of write barriers is used at runtime to communicate with GC for letting the GC know the set of objects that needs to be tracked due to object pointers getting stored in another object and classes.&lt;/p&gt;&#xA;&lt;p&gt;The JIT compiler is required to insert a write barrier in the code which it generates to maintain the function correctness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>List of Conferences (For PL and Compilers)</title>
      <link>https://adityaanand7.github.io/research/general/conference/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/conference/</guid>
      <description>&lt;style&gt;&#xA;  table {&#xA;    width: 100%;&#xA;    border-collapse: collapse;&#xA;    margin: 20px 0;&#xA;    font-size: 16px;&#xA;    text-align: left;&#xA;    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);&#xA;    border-radius: 8px;&#xA;    overflow: hidden;&#xA;  }&#xA;  th, td {&#xA;    border: 1px solid #ddd;&#xA;    padding: 12px;&#xA;  }&#xA;  th {&#xA;    background-color: #007bff;&#xA;    color: #fff;&#xA;    text-align: center;&#xA;  }&#xA;  td {&#xA;    background-color: #f9f9f9;&#xA;  }&#xA;  tr:nth-child(even) td {&#xA;    background-color: #f1f1f1;&#xA;  }&#xA;  tr:hover td {&#xA;    background-color: #e9ecef;&#xA;  }&#xA;  a {&#xA;    color: #007bff;&#xA;    text-decoration: none;&#xA;    font-weight: bold;&#xA;  }&#xA;  a:hover {&#xA;    text-decoration: underline;&#xA;  }&#xA;&lt;/style&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;th&gt;Sl.No.&lt;/th&gt;&#xA;      &lt;th&gt;Conference&lt;/th&gt;&#xA;      &lt;th&gt;Submission&lt;/th&gt;&#xA;      &lt;th&gt;Core Rank (2020)&lt;/th&gt;&#xA;      &lt;th&gt;Scope of the Conference&lt;/th&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;1&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://popl24.sigplan.org/&#34;&gt;POPL&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;July&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;Programming languages and systems (both theoretical and experimental papers).&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;2&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://2024.splashcon.org/&#34;&gt;OOPSLA&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;October and April&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All practical and theoretical investigations of programming languages, systems, and environments.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;3&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/ecoop-issta-2024&#34;&gt;ECOOP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;December and March&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;Originally focused on object-orientation, now includes all practical and theoretical investigations of programming languages, systems, and environments.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;4&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://pldi23.sigplan.org/&#34;&gt;PLDI&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;November&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;All programming-language concepts, novel system designs, thorough empirical work, well-motivated theoretical results, and new application areas.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;5&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/sas-2023&#34;&gt;SAS&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;May&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Program verification, abstract interpretation, compiler optimization, model-checking, type checking, etc.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;6&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/cgo-2024&#34;&gt;CGO&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;May and September&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Code generation, translation, transformation, and optimization. Includes dynamic/static, profile-guided, feedback-directed, and hybrid analysis.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;7&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/cgo-2024&#34;&gt;CC&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;November&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Compilation and interpretation techniques, runtime techniques, programming tools, design, and implementation.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;8&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://icfp23.sigplan.org/&#34;&gt;ICFP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;A*&lt;/td&gt;&#xA;      &lt;td&gt;Language design, implementation, software-development techniques, foundations, analysis and transformation, applications, education, etc.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;9&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://pact2023.github.io/&#34;&gt;PACT&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;March&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Parallel architectures, compilers and tools for parallel computer systems, insights for the design of parallel architectures and compilers from modern parallel applications, neuromorphic computing.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;    &lt;tr&gt;&#xA;      &lt;td&gt;10&lt;/td&gt;&#xA;      &lt;td&gt;&lt;a href=&#34;https://conf.researchr.org/home/ppopp-2023&#34;&gt;PPOPP&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;td&gt;August&lt;/td&gt;&#xA;      &lt;td&gt;A&lt;/td&gt;&#xA;      &lt;td&gt;Compilers and runtime systems for parallel and heterogeneous systems, development, analysis, or management tools, performance analysis, debugging and optimization, formal analysis and verification.&lt;/td&gt;&#xA;    &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;!-------&gt;&#xA;&lt;!--title: List of Conferences (For PL and Compilers) --&gt;&#xA;&lt;!--date: 2023-07-15--&gt;&#xA;&lt;!--math: true--&gt;&#xA;&lt;!--draft: true--&gt;&#xA;&lt;!-------&gt;&#xA;&lt;!----&gt;&#xA;&lt;!--___________________________________________________________________________________________________________________________________________________--&gt;&#xA;&lt;!--| Sl.No. | Conference                                                           |   Submission       | Core Rank (2020) |Scope of the Conference  | --&gt;&#xA;&lt;!--| ------ | -----------                                                          | ---------------    | -----------------| ---------------------   | --&gt;&#xA;&lt;!--|   1.   |  &amp;nbsp; &amp;nbsp; [POPL](https://popl24.sigplan.org/)                   |       July         |    A\*           | Programming languages and systems. (both theoretical and experimental papers)| --&gt;&#xA;&lt;!--|   2.   |   &amp;nbsp; [OOPSLA](https://2024.splashcon.org/)                       | October and April  |    A\*           | All practical and theoretical investigations of programming languages, systems and environments.             |--&gt;&#xA;&lt;!--|   3.   |   &amp;nbsp; [ECOOP](https://conf.researchr.org/home/ecoop-issta-2024)   | December and March |    A\*           |  Originally focused on object-orientation, now includes all practical and theoretical investigations of programming languages, systems and environments             |--&gt;&#xA;&lt;!--|   4.   |   &amp;nbsp; [PLDI](https://pldi23.sigplan.org/)                         |      November      |    A\*           |All programming-language concepts, Novel system designs, thorough empirical work, well-motivated theoretical results, and new application areas.               |--&gt;&#xA;&lt;!--|   5.   |   &amp;nbsp; [SAS](https://conf.researchr.org/home/sas-2023)             |        May         |    A             | Program verification, Abstract interpretation, Compiler Optimization, Model-checking, Type checking, etc              |--&gt;&#xA;&lt;!--|   6.   |   &amp;nbsp; [CGO](https://conf.researchr.org/home/cgo-2024)             | May and September  |    A             |Code Generation, Translation, Transformation, and Optimization.Dynamic/static, profile-guided, feedback-directed, andStatic, Dynamic, and Hybrid Analysis etc.               |--&gt;&#xA;&lt;!--|   7.   |   &amp;nbsp; [CC](https://conf.researchr.org/home/cgo-2024)              |      November      |    A             | Compilation and interpretation techniques, Run-time techniques, Programming tools, Design and implementation etc.        |--&gt;&#xA;&lt;!--|   8.   |   &amp;nbsp; [ICFP](https://icfp23.sigplan.org/)                         |       March        |    A\*           |Language Design, Implementation, Software-Development Techniques, Foundations, Analysis and Transformation, Applications, Education etc.               |--&gt;&#xA;&lt;!--|   9.   |   &amp;nbsp; [PACT](https://pact2023.github.io/)                         |       March        |    A             |Parallel architectures, Compilers and tools for parallel computer systems, Insights for the design of parallel architectures and compilers from modern parallel applications, Neuromorphic computing both as an application for and a tool applied to architectures and compilersetc               |--&gt;&#xA;&lt;!--|   10.  |   &amp;nbsp; [PPOPP](https://conf.researchr.org/home/ppopp-2023)         |       August       |    A             | Compilers and runtime systems for parallel and heterogeneous systems, Development, analysis, or management tools, Performance analysis, debugging and optimization, Formal analysis and verification etc.              |--&gt;&#xA;&lt;!--_________________________________________________________________________________________________________________________________________--&gt;&#xA;&lt;!----&gt;</description>
    </item>
  </channel>
</rss>
