<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PL and Compilers Research on Aditya Anand</title>
    <link>https://adityaanand7.github.io/research/</link>
    <description>Recent content in PL and Compilers Research on Aditya Anand</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>Â© 2023 by Aditya Anand. &lt;a href=&#39;https://adityaanand7.github.io/privacy&#39;&gt;Privacy policy&lt;/a&gt;.</copyright>
    <lastBuildDate>Tue, 20 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://adityaanand7.github.io/research/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Write Barriers in JIT Compilers</title>
      <link>https://adityaanand7.github.io/research/general/write_barriers/</link>
      <pubDate>Tue, 20 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/write_barriers/</guid>
      <description>In languages like Java where garbage collector (GC) is used for cleaning up the unused references. The idea of write barriers is used at runtime to communicate with GC for letting the GC know the set of objects that needs to be tracked due to object pointers getting stored in another object and classes.&#xA;The JIT compiler is required to insert a write barrier in the code which it generates to maintain the function correctness.</description>
    </item>
    <item>
      <title>List of Conferences (For PL and Compilers)</title>
      <link>https://adityaanand7.github.io/research/general/conference/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://adityaanand7.github.io/research/general/conference/</guid>
      <description>Sl.No. Conference Submission Core Rank (2020) Scope of the Conference 1. POPL July A* Programming languages and systems. (both theoretical and experimental papers) 2. OOPSLA October and April A* All practical and theoretical investigations of programming languages, systems and environments. 3. ECOOP December and March A* Originally focused on object-orientation, now includes all practical and theoretical investigations of programming languages, systems and environments 4. PLDI November A* All programming-language concepts, Novel system designs, thorough empirical work, well-motivated theoretical results, and new application areas.</description>
    </item>
  </channel>
</rss>
